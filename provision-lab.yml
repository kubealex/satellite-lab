- name: Download RHEL ISOs
  hosts: localhost
  vars_prompt:
    - name: offline_token
      prompt: What is your Offline Token? Leave this empty if you don't want to download ISOS (Check README)
      unsafe: yes
      private: yes      
  vars:
    checksum:
      rhel8: 1f78e705cd1d8897a05afa060f77d81ed81ac141c2465d4763c0382aa96cadd0
      rhel7: 19d653ce2f04f202e79773a0cbeda82070e7527557e814ebbce658773fbe8191

  tasks:
    - block:

      - name: Retrieve an access token
        uri:
          url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
          body:
            grant_type: refresh_token
            client_id: rhsm-api
            refresh_token: "{{ offline_token }}"
          body_format: form-urlencoded
          method: POST
        register: response

      - name: Workaround to non-working uri module on success
        shell: 'curl -H "Authorization: Bearer {{ response.json.access_token }}" https://api.access.redhat.com/management/v1/images/{{ item }}/download'
        loop:
          - "{{ checksum.rhel7 }}"
          - "{{ checksum.rhel8 }}"
        register: imageurl

  # HANGING FOREVER
  #    - name: Retrieve image download URL
  #      ansible.builtin.uri:
  #        url: https://api.access.redhat.com/management/v1/images/{{ checksum.rhel8 }}/download
  #        return_content: true
  #        follow_redirects: all
  #        headers:
  #          Content-Type: application/json
  #          Authorization: 'Bearer {{ response.json.access_token }}'
  #          User-Agent: curl/7.61.1
  #      register: imageurl
      - name: Set result as facts
        ansible.builtin.set_fact:
          rhel7_url: "{{ (imageurl.results[0].stdout | from_json).body.href }}"
          rhel7_filename: "{{(imageurl.results[0].stdout | from_json).body.filename }}"
          rhel8_url: "{{ (imageurl.results[1].stdout | from_json).body.href }}"
          rhel8_filename: "{{ (imageurl.results[1].stdout | from_json).body.filename }}"

      - name: Retrieve RHEL ISO
        get_url:
          url: "{{ item.url }}"
          dest: "{{ playbook_dir }}/{{ item.filename }}.iso"
        loop:
          - url: "{{ rhel7_url }}"
            os: "rhel7"
          - url: "{{ rhel8_url }}"
            os: "rhel8"
      when: offline_token is defined
      
- name: This play provisions VMs for Satellite demos
  hosts: localhost
  vars:
    network_cidr: 192.168.211.0/24
  become: true
  tasks:

    - name: Create symbolic link to RHEL image
      file:
        src: "{{ playbook_dir }}/{{ item.os }}.iso"
        dest: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.os }}.iso"
        state: link
      loop:
        - module: 01_satellite_instance
          os: rhel7
        - module: 02_client_instance
          os: rhel7          
        - module: 02_client_instance
          os: rhel8

    - name: Rebuild Kickstart config
      community.general.filesystem:
        fstype: ext2
        dev: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.kickstart }}-oemdrv.img"
        opts: -d {{ playbook_dir }}/terraform/kickstart/{{ item.kickstart }} -L OEMDRV
        force: true
      loop:
        - module: 01_satellite_instance
          kickstart: rhel7-satellite
        - module: 02_client_instance
          kickstart: rhel7
        - module: 02_client_instance
          kickstart: rhel8
        
        
    - name: Provision all terraform resources
      community.general.terraform:
        project_path: "terraform/"
        force_init: true
        variables:
          network_cidr: ' ["{{ network_cidr }}"]'
        state: present

    - name: Add Local resolver for the domain
      copy:
        content: server=/satellitedemo.labs/{{ network_cidr | next_nth_usable(1)}}
        dest: /etc/NetworkManager/dnsmasq.d/satellitedemo.conf
    
    - name: Restart NetworkManager to reload config
      service:
        name: NetworkManager
        state: restarted

    - name: Add servers to inventory
      add_host:
        hostname: "{{ item }}.satellitedemo.labs"
        ansible_user: root
        ansible_password: redhat
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups:
          - "servers"        
      loop:
        - satellite
        - el7-server
        - el8-server

    - name: Ensure to clean known_hosts
      known_hosts:
        host: "{{ item }}"
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ groups['servers'] }}"

- name: Check connection to servers
  hosts: servers
  gather_facts: no
  tasks:
    - name: Waiting for installation to end, it can take time!
      wait_for_connection:
        timeout: 1800
        delay: 0

    - name: Setup sysadmin user to use sudo
      copy:
        content: '%wheel	ALL=(ALL)	NOPASSWD: ALL'
        dest: /etc/sudoers.d/wheelers
        mode: 0400
        owner: root
        group: root

    - ping:

    - name: Setup is ready
      debug:
        msg: "Setup completed, now you can proceed with post install steps"

